1) Write and execute assembly program to illustrate push and pop instructions.

PRESERVE8 ; Indicate the code here preserve  
; 8 byte stack alignment         
                     THUMB     ; Indicate THUMB code is used       
                 AREA    |.text|, CODE, READONLY
			   
              EXPORT __main			 
; Start of CODE area 
__main                 
               LDR r3,=0x20000100
			   LDR r0,=0x20000050
			   LDMIA r3!,{r1,r2}
			  
			   mov SP,r0
			   PUSH {r1,r2}
			   POP {r4,r5}
stop            B   stop			   
               END              


2)Write a C program to light a LED connected to port C15 using an interrupt.

#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvGPIO.h"
#include "Driver\DrvUART.h"
#include "Driver\DrvSYS.h"


void EINT1Callback(void) 
{
  DrvGPIO_ClrBit(E_GPC,15); 
	DrvSYS_Delay(100000);	    
	DrvGPIO_SetBit(E_GPC,15); 
	DrvSYS_Delay(100000);	    	
}

int main (void)
{
	UNLOCKREG();
	DrvSYS_SetOscCtrl(E_SYS_XTL12M, 1);
	DrvSYS_Delay(5000);                
	DrvSYS_SelectHCLKSource(0);         
	LOCKREG();

	DrvGPIO_Open(E_GPC, 15, E_IO_OUTPUT);
   
	//Interrupt (Don't change code here)
  DrvGPIO_Open(E_GPC, 15, E_IO_INPUT);       
  DrvGPIO_EnableEINT1(E_IO_BOTH_EDGE, E_MODE_EDGE, EINT1Callback);

  while(1)
	{
  }
}

3) Write a C program to light a LED connected to port C14 using an interrupt.
=> Same as 2nd one, just change every (E_GPC,15) to (E_GPC,14) except Interrupt


4)Write and execute assembly program to illustrate the usage of functions (in nested routine process the data x , calculate y=2x+9)

(i) Main.asm:

	PRESERVE8       
                    THUMB           
                 AREA    |.text|, CODE, READONLY
			   
                                          EXPORT __main 
			  EXTERN  func

__main
	LDR r0,=0x10;
 BL func
stop B stop
  END


(ii) func.asm

PRESERVE8
	THUMB
	AREA |.text|, CODE, READONLY
	EXPORT func
	EXTERN func2
	
func
	push{LR}
	LDR R3,=0x2
	MULS R0, R3, R0
	movs R1, R0
	BL func2
	pop{PC}
    	END


(iii) func2.asm

      PRESERVE8
	THUMB
	AREA |.text|, CODE, READONLY
	EXPORT func2
	
func2
	MOVS r2,#09
	adds R1, R1, R2
	BX LR
	   END



5)Write and execute assembly program to find sum of N array elements, the array locations starts from 20000100 and store the result at the address 20000500.

		PRESERVE8 ; Indicate the code here preserve  
; 8 byte stack alignment         
                     THUMB     ; Indicate THUMB code is used       
                 AREA    |.text|, CODE, READONLY
			
              EXPORT __main			
; Start of CODE area 
DataIn EQU 0x20000000
Sum EQU 0x20000040

__main
	LDR r0,=DataIn; Get the address of variable 'DataIn'
	MOVS r1, #10 ; loop counter
	MOVS r2, #0 ; Result - starting from 0
add_loop
	LDM r0!,{r3} ; Load result and increment address
	ADDS r2, r3 ; add to result
	SUBS r1, #1 ; increment loop counter
	BNE add_loop
	LDR r0,=Sum ; Get the address of variable 'Sum'
	STR r2,[r0] ; Save result to Sum
stop B stop
	END


6)Write a C program to display a string â€œwelcome to msritâ€ on LCD interface.

#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvSYS.h"
#include "Driver\DrvGPIO.h"
#include "NUC1xx-LB_002\LCD_Driver.h"

int main(void)
{
	UNLOCKREG();
	DrvSYS_Open(48000000); // set to 48MHz
	LOCKREG(); 

	Initial_panel(); 
	clr_all_panel();
	
	print_lcd(0, " welcome to msrit ");	  
	print_lcd(1, "All the best    ");
	print_lcd(2, "For tomm's lab");
	print_lcd(3, "Byee ");    	  	 	  		
}


7)Write and execute assembly program to implement switch-case.

PRESERVE8 ; Indicate the code here preserve  
; 8 byte stack alignment         
                     THUMB     ; Indicate THUMB code is used       
                 AREA    |.text|, CODE, READONLY
			   
              EXPORT __main			 
; Start of CODE area 
__main
	 LDR R0, =0
	 CMP R0, #3 ; Compare input to maximum valid choice
	 BHI default_case ; Branch to default case if higher than 3 
	 MOVS R2, #4 ; Multiply branch table offset by 4 
	 MULS R0, R2, R0 ; (size of each entry) 
        LDR R1, =BranchTable ; Get base address of branch table(0x284)
        LDR R2,[R1,R0] ; Get the actual branch destination 
        BX R2 ; Branch to destination 
ALIGN 4 ; Alignment control. The table has
BranchTable ; to be word aligned to prevent unaligned read ;table of each destination address
    DCD Dest0 
    DCD  Dest1 
    DCD Dest2 
    DCD Dest3 
default_case 
stop B stop; Instructions for default case 
Dest0  ldr r0, =10 
stop1 B stop1 ; Instructions for case â€˜0â€™ 
Dest1 ldr r0, =20  
stop2 B stop2 ; Instructions for case â€˜1â€™ 
Dest2 ldr r0, =30  
stop3 B stop3 ; Instructions for case â€˜2â€™ 
Dest3 ldr r0, =40  
stop4 B stop4 ; Instructions for case â€˜3â€™ 
	 
	 END


8)Write a C program to beep a buzzer connected to port b11 using an interrupt.

=> Same as 2nd one, just change every (E_GPC,15) to (E_GPB,11) except Interrupt

#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvGPIO.h"
#include "Driver\DrvUART.h"
#include "Driver\DrvSYS.h"


void EINT1Callback(void) 
{
  DrvGPIO_ClrBit(E_GPB,11); 
	DrvSYS_Delay(100000);	   
	DrvGPIO_SetBit(E_GPB,11); 	
	DrvSYS_Delay(100000);		
}

int main (void)
{
	UNLOCKREG();
	DrvSYS_SetOscCtrl(E_SYS_XTL12M, 1); 
	DrvSYS_Delay(5000);               
	DrvSYS_SelectHCLKSource(0);     
	LOCKREG();

	DrvGPIO_Open(E_GPB, 11, E_IO_OUTPUT);
   
	//Interrupt (Don't change code here)
  DrvGPIO_Open(E_GPB, 15, E_IO_INPUT);                             
  DrvGPIO_EnableEINT1(E_IO_BOTH_EDGE, E_MODE_EDGE, EINT1Callback);

  while(1)
	{
  }
}


9)Write the procedure you follow to configure raspberry pi to work in SSH environment. And demonstrate the same with a python program to blink a LED 

import RPi.GPIO as GPIO
import time
# Set the GPIO mode to BCM
GPIO.setmode(GPIO.BCM)
# Set up GPIO pin 17 as an output pin
led_pin = 17
GPIO.setup(led_pin, GPIO.OUT)
try:
while True:
# Turn on the LED
GPIO.output(led_pin, GPIO.HIGH)
time.sleep(1) # Wait for 1 second
# Turn off the LED
GPIO.output(led_pin, GPIO.LOW)
time.sleep(1) # Wait for 1 second
except KeyboardInterrupt:
# Clean up GPIO configuration on keyboard interrupt (Ctrl+C)
GPIO.cleanup()


10)Write a C program to light a LED connected to port C12 using an interrupt.
=> Same as 2nd one, just change every (E_GPC,15) to (E_GPC,12) except Interrupt
